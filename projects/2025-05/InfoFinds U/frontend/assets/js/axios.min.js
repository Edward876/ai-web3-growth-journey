/* 简化版的Axios，实现基本的HTTP请求功能 */
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.axios = factory());
})(this, function() {
  'use strict';

  const axios = {
    defaults: {
      headers: {
        common: {}
      }
    },
    
    get: function(url, config) {
      return this.request(Object.assign({
        method: 'get',
        url: url
      }, config || {}));
    },
    
    post: function(url, data, config) {
      return this.request(Object.assign({
        method: 'post',
        url: url,
        data: data
      }, config || {}));
    },
    
    request: function(config) {
      return new Promise(function(resolve, reject) {
        const xhr = new XMLHttpRequest();
        
        // 设置请求方法和URL
        xhr.open(config.method.toUpperCase(), config.url, true);
        
        // 设置请求头
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        // 添加全局通用请求头
        for (const key in axios.defaults.headers.common) {
          if (axios.defaults.headers.common.hasOwnProperty(key)) {
            xhr.setRequestHeader(key, axios.defaults.headers.common[key]);
          }
        }
        
        // 监听状态变化
        xhr.onreadystatechange = function() {
          if (xhr.readyState !== 4) return;
          
          if (xhr.status >= 200 && xhr.status < 300) {
            let response;
            
            try {
              response = JSON.parse(xhr.responseText);
            } catch (e) {
              response = xhr.responseText;
            }
            
            resolve({
              data: response,
              status: xhr.status,
              statusText: xhr.statusText,
              headers: xhr.getAllResponseHeaders(),
              config: config
            });
          } else {
            let response;
            
            try {
              response = JSON.parse(xhr.responseText);
            } catch (e) {
              response = xhr.responseText;
            }
            
            reject({
              response: {
                data: response,
                status: xhr.status,
                statusText: xhr.statusText
              },
              message: 'Request failed with status code ' + xhr.status
            });
          }
        };
        
        // 处理网络错误
        xhr.onerror = function() {
          reject({
            message: 'Network Error'
          });
        };
        
        // 处理超时
        xhr.ontimeout = function() {
          reject({
            message: 'Request timeout'
          });
        };
        
        // 发送数据
        const data = config.data ? JSON.stringify(config.data) : null;
        xhr.send(data);
      });
    }
  };
  
  return axios;
}); 